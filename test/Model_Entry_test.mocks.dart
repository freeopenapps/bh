// Mocks generated by Mockito 5.0.3 from annotations
// in bloodhound/test/Model_Entry_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:bloodhound/models/Entry.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [Entry].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntry extends _i1.Mock implements _i2.Entry {
  MockEntry() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  set id(String? _id) => super.noSuchMethod(Invocation.setter(#id, _id),
      returnValueForMissingStub: null);
  @override
  String get date =>
      (super.noSuchMethod(Invocation.getter(#date), returnValue: '') as String);
  @override
  set date(String? _date) => super.noSuchMethod(Invocation.setter(#date, _date),
      returnValueForMissingStub: null);
  @override
  String get ketones =>
      (super.noSuchMethod(Invocation.getter(#ketones), returnValue: '')
          as String);
  @override
  set ketones(String? _ketones) =>
      super.noSuchMethod(Invocation.setter(#ketones, _ketones),
          returnValueForMissingStub: null);
  @override
  String get glucose =>
      (super.noSuchMethod(Invocation.getter(#glucose), returnValue: '')
          as String);
  @override
  set glucose(String? _glucose) =>
      super.noSuchMethod(Invocation.setter(#glucose, _glucose),
          returnValueForMissingStub: null);
  @override
  String get weight =>
      (super.noSuchMethod(Invocation.getter(#weight), returnValue: '')
          as String);
  @override
  set weight(String? _weight) =>
      super.noSuchMethod(Invocation.setter(#weight, _weight),
          returnValueForMissingStub: null);
  @override
  String get pressure =>
      (super.noSuchMethod(Invocation.getter(#pressure), returnValue: '')
          as String);
  @override
  set pressure(String? _pressure) =>
      super.noSuchMethod(Invocation.setter(#pressure, _pressure),
          returnValueForMissingStub: null);
  @override
  String get note =>
      (super.noSuchMethod(Invocation.getter(#note), returnValue: '') as String);
  @override
  set note(String? _note) => super.noSuchMethod(Invocation.setter(#note, _note),
      returnValueForMissingStub: null);
  @override
  String get picPath =>
      (super.noSuchMethod(Invocation.getter(#picPath), returnValue: '')
          as String);
  @override
  set picPath(String? _picPath) =>
      super.noSuchMethod(Invocation.setter(#picPath, _picPath),
          returnValueForMissingStub: null);
  @override
  Map<String, String?> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, String?>{}) as Map<String, String?>);
}

/// A class which mocks [PathManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPathManager extends _i1.Mock implements _i2.PathManager {
  MockPathManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> downloadsPath() =>
      (super.noSuchMethod(Invocation.method(#downloadsPath, []),
          returnValue: Future.value('')) as _i3.Future<String>);
}

/// A class which mocks [PermissionManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionManager extends _i1.Mock implements _i2.PermissionManager {
  MockPermissionManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> storage() =>
      (super.noSuchMethod(Invocation.method(#storage, []),
          returnValue: Future.value(false)) as _i3.Future<bool>);
}
