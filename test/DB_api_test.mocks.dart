// Mocks generated by Mockito 5.0.3 from annotations
// in bloodhound/test/DB_api_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:bloodhound/data/db_api.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite_common/sqlite_api.dart' as _i2;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeDatabaseFactory extends _i1.Fake implements _i2.DatabaseFactory {}

class _FakeDatabase extends _i1.Fake implements _i2.Database {}

/// A class which mocks [DatabaseFactoryManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseFactoryManager extends _i1.Mock
    implements _i3.DatabaseFactoryManager {
  MockDatabaseFactoryManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseFactory getFactory() =>
      (super.noSuchMethod(Invocation.method(#getFactory, []),
          returnValue: _FakeDatabaseFactory()) as _i2.DatabaseFactory);
}

/// A class which mocks [DatabaseFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseFactory extends _i1.Mock implements _i2.DatabaseFactory {
  MockDatabaseFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> openDatabase(String? path,
          {_i2.OpenDatabaseOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#openDatabase, [path], {#options: options}),
              returnValue: Future.value(_FakeDatabase()))
          as _i4.Future<_i2.Database>);
  @override
  _i4.Future<String> getDatabasesPath() =>
      (super.noSuchMethod(Invocation.method(#getDatabasesPath, []),
          returnValue: Future.value('')) as _i4.Future<String>);
  @override
  _i4.Future<void> setDatabasesPath(String? path) =>
      (super.noSuchMethod(Invocation.method(#setDatabasesPath, [path]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteDatabase(String? path) =>
      (super.noSuchMethod(Invocation.method(#deleteDatabase, [path]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<bool> databaseExists(String? path) =>
      (super.noSuchMethod(Invocation.method(#databaseExists, [path]),
          returnValue: Future.value(false)) as _i4.Future<bool>);
}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i1.Mock implements _i2.Database {
  MockDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Future<void> execute(String cmd, [dynamic arguments]) async {
    return super.noSuchMethod(Invocation.method(#execute, [cmd, arguments]))
        as dynamic;
  }

  @override
  Future<int> insert(
    String cmd,
    Map<String, Object?> m, {
    _i2.ConflictAlgorithm? conflictAlgorithm,
    String? nullColumnHack,
  }) async {
    return super.noSuchMethod(
      Invocation.method(
        #insert,
        [
          cmd,
          m,
          conflictAlgorithm,
          nullColumnHack,
        ],
      ),
    ) as dynamic;
  }

  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  bool get isOpen =>
      (super.noSuchMethod(Invocation.getter(#isOpen), returnValue: false)
          as bool);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future.value(null),
      returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<T> transaction<T>(_i4.Future<T> Function(_i2.Transaction)? action,
          {bool? exclusive}) =>
      (super.noSuchMethod(
          Invocation.method(#transaction, [action], {#exclusive: exclusive}),
          returnValue: Future.value(null)) as _i4.Future<T>);
  @override
  _i4.Future<int> getVersion() =>
      (super.noSuchMethod(Invocation.method(#getVersion, []),
          returnValue: Future.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<void> setVersion(int? version) =>
      (super.noSuchMethod(Invocation.method(#setVersion, [version]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<T> devInvokeMethod<T>(String? method, [dynamic arguments]) =>
      (super.noSuchMethod(
          Invocation.method(#devInvokeMethod, [method, arguments]),
          returnValue: Future.value(null)) as _i4.Future<T>);
  @override
  _i4.Future<T> devInvokeSqlMethod<T>(String? method, String? sql,
          [List<Object?>? arguments]) =>
      (super.noSuchMethod(
          Invocation.method(#devInvokeSqlMethod, [method, sql, arguments]),
          returnValue: Future.value(null)) as _i4.Future<T>);
}
